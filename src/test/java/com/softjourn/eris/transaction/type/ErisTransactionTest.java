package com.softjourn.eris.transaction.type;

import com.softjourn.eris.contract.ContractUnit;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.util.List;
import java.util.Scanner;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

/**
 * TransactionTest
 * Created by vromanchuk on 13.01.17.
 */
public class ErisTransactionTest {

    private String deployTransaction
    private String transactionBinary;
    private ErisTransaction transaction;
    private String abi;
    private String wrongAbi;

    @Before
    public void setUp() throws Exception {
        File file;

        file = new File("src/test/resources/json/coinsContractAbi.json");
        this.abi = new Scanner(file).useDelimiter("\\Z").next();

        file = new File("src/test/resources/json/wrong_abi.json");
        this.wrongAbi = new Scanner(file).useDelimiter("\\Z").next();

        file = new File("src/test/resources/TransactionBinary.txt");
        this.transactionBinary = new Scanner(file).useDelimiter("\\Z").next();

        this.transaction = new ErisTransaction(transactionBinary);
    }

    @Test
    public void newTransaction_NotNullTransaction() throws Exception {
        assertNotNull(transaction);
        System.out.println(transaction);
    }

    @Test(expected = StringIndexOutOfBoundsException.class)
    public void newTransaction_fakeString_StringIndexOutOfBoundsException() throws Exception {
        new ErisTransaction("fake transaction");
    }

    @Test
    public void getContractUnit_abi_unit() throws Exception {
        ContractUnit unit = transaction.getContractUnit(abi);
        assertNotNull(unit);
    }

    @Test
    public void parseCallingData_ContractUnit() throws Exception {
        ContractUnit unit = transaction.getContractUnit(abi);
        List<Object> parseData = transaction.parseCallingData(unit);
        assertNotNull(parseData);
        String expected = "[90CCB0132FA9287AB3C3283978C0E523FA1450A0, 110]";
        assertEquals(expected, parseData.toString());
    }

    @Test(expected = IllegalArgumentException.class)
    public void parseCallingData_WrongAbi_IllegalArgumentException() throws Exception {
        ContractUnit unit = transaction.getContractUnit(wrongAbi);
        transaction.parseCallingData(unit);
    }

    @Test
    public void generateTxCode() throws Exception {
        ErisTransaction erisTransaction = new ErisTransaction(transactionBinary);
        assertEquals(transactionBinary, erisTransaction.generateTxCode());
        System.out.println(erisTransaction.getContractAddress());
    }
}
